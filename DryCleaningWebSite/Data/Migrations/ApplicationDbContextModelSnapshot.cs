// <auto-generated />
using System;
using DryCleaningWebSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DryCleaningWebSite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DryCleaningWebSite.Models.BurnoutDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BurnoutDegrees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Изменение цвета"
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Слабый"
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = "Средний"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[FamilyName] + ' ' + [Name] + ' ' + [FatherName]");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotifyPromotions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Value = 5
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Value = 10
                        },
                        new
                        {
                            Id = 4,
                            IsDeprecated = false,
                            Value = 25
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ц/п Address",
                            IsDeprecated = false,
                            Name = "ц/п"
                        },
                        new
                        {
                            Id = 2,
                            Address = "п/п 1 Address",
                            IsDeprecated = false,
                            Name = "п/п 1"
                        },
                        new
                        {
                            Id = 3,
                            Address = "п/п 2 Address",
                            IsDeprecated = false,
                            Name = "п/п 2"
                        },
                        new
                        {
                            Id = 4,
                            Address = "п/п 3 Address",
                            IsDeprecated = false,
                            Name = "п/п 3"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.GlueParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GluePartss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Отсутствуют"
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Имеются"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.ManufacturerMarking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ManufacturerMarkings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Имеется"
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Отсутствует"
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = "Запрещает химическую чистку"
                        },
                        new
                        {
                            Id = 4,
                            IsDeprecated = false,
                            Name = "Не соответствует ГОСТу ISO 3758-2014"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.OperationalWearDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OperationalWearDegrees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = 10
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = 30
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = 50
                        },
                        new
                        {
                            Id = 4,
                            IsDeprecated = false,
                            Name = 75
                        },
                        new
                        {
                            Id = 5,
                            IsDeprecated = false,
                            Name = 100
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AdditionalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BurnoutDegreeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfAffectedPlainIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfPlainIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfReceipt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefectsAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefectsBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("GluePartsId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAbrasion")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBloodWine")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDeformation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasOilFat")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPaintBlackPasta")
                        .HasColumnType("bit");

                    b.Property<bool>("HasShine")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSpotUnknownOrigin")
                        .HasColumnType("bit");

                    b.Property<int?>("ManufacturerMarkingId")
                        .HasColumnType("int");

                    b.Property<string>("NonRemovableFittings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationalWearDegreeId")
                        .HasColumnType("int");

                    b.Property<int?>("PollutionDegreeId")
                        .HasColumnType("int");

                    b.Property<string>("RemovableFittings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusPayId")
                        .HasColumnType("int");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("ThingComplect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThingSize")
                        .HasColumnType("int");

                    b.Property<int?>("ThingTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BurnoutDegreeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FilialId");

                    b.HasIndex("GluePartsId");

                    b.HasIndex("ManufacturerMarkingId");

                    b.HasIndex("OperationalWearDegreeId");

                    b.HasIndex("PollutionDegreeId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("StatusOrderId");

                    b.HasIndex("StatusPayId");

                    b.HasIndex("StockId");

                    b.HasIndex("ThingTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.OrderAdditionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Data")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAdditionalInfos");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.PollutionDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PollutionDegrees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Degree = "Общее",
                            IsDeprecated = false
                        },
                        new
                        {
                            Id = 2,
                            Degree = "Сильное",
                            IsDeprecated = false
                        },
                        new
                        {
                            Id = 3,
                            Degree = "Очень сильное",
                            IsDeprecated = false
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Химическая чистка"
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Аквачистка"
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = "Стирка"
                        },
                        new
                        {
                            Id = 4,
                            IsDeprecated = false,
                            Name = "Крашение"
                        },
                        new
                        {
                            Id = 5,
                            IsDeprecated = false,
                            Name = "Глажение"
                        },
                        new
                        {
                            Id = 6,
                            IsDeprecated = false,
                            Name = "Ремонт"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Оформлен"
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Отправлен в химчистку"
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = "Принят химчисткой"
                        },
                        new
                        {
                            Id = 4,
                            IsDeprecated = false,
                            Name = "Оказание услуг химчистки"
                        },
                        new
                        {
                            Id = 5,
                            IsDeprecated = false,
                            Name = "Услуги оказаны"
                        },
                        new
                        {
                            Id = 6,
                            IsDeprecated = false,
                            Name = "Отправлен на приёмный пункт"
                        },
                        new
                        {
                            Id = 7,
                            IsDeprecated = false,
                            Name = "Принят приёмным пунктом"
                        },
                        new
                        {
                            Id = 8,
                            IsDeprecated = false,
                            Name = "Закрыт"
                        },
                        new
                        {
                            Id = 9,
                            IsDeprecated = false,
                            Name = "Отказ от услуг химчистки"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.StatusPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusPays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Не оплачен"
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Ожидает оплаты"
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = "Оплачен"
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Value = 15
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Value = 20
                        },
                        new
                        {
                            Id = 4,
                            IsDeprecated = false,
                            Value = 35
                        });
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.ThingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ThingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeprecated = false,
                            Name = "Пальто",
                            Price = 1000m
                        },
                        new
                        {
                            Id = 2,
                            IsDeprecated = false,
                            Name = "Футболка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 3,
                            IsDeprecated = false,
                            Name = "Джинсы",
                            Price = 350m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Client", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.Discount", "Discount")
                        .WithMany("Clients")
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Employee", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.Filial", "Filial")
                        .WithMany("Employees")
                        .HasForeignKey("FilialId");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Order", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.BurnoutDegree", "BurnoutDegree")
                        .WithMany("Orders")
                        .HasForeignKey("BurnoutDegreeId");

                    b.HasOne("DryCleaningWebSite.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId");

                    b.HasOne("DryCleaningWebSite.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DryCleaningWebSite.Models.Filial", "Filial")
                        .WithMany("Orders")
                        .HasForeignKey("FilialId");

                    b.HasOne("DryCleaningWebSite.Models.GlueParts", "GlueParts")
                        .WithMany("Orders")
                        .HasForeignKey("GluePartsId");

                    b.HasOne("DryCleaningWebSite.Models.ManufacturerMarking", "ManufacturerMarking")
                        .WithMany("Orders")
                        .HasForeignKey("ManufacturerMarkingId");

                    b.HasOne("DryCleaningWebSite.Models.OperationalWearDegree", "OperationalWearDegree")
                        .WithMany("Orders")
                        .HasForeignKey("OperationalWearDegreeId");

                    b.HasOne("DryCleaningWebSite.Models.PollutionDegree", "PollutionDegree")
                        .WithMany("Orders")
                        .HasForeignKey("PollutionDegreeId");

                    b.HasOne("DryCleaningWebSite.Models.ServiceType", "ServiceType")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("DryCleaningWebSite.Models.StatusOrder", "StatusOrder")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrderId");

                    b.HasOne("DryCleaningWebSite.Models.StatusPay", "StatusPay")
                        .WithMany("Orders")
                        .HasForeignKey("StatusPayId");

                    b.HasOne("DryCleaningWebSite.Models.Stock", "Stock")
                        .WithMany("Orders")
                        .HasForeignKey("StockId");

                    b.HasOne("DryCleaningWebSite.Models.ThingType", "ThingType")
                        .WithMany("Orders")
                        .HasForeignKey("ThingTypeId");

                    b.Navigation("BurnoutDegree");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Filial");

                    b.Navigation("GlueParts");

                    b.Navigation("ManufacturerMarking");

                    b.Navigation("OperationalWearDegree");

                    b.Navigation("PollutionDegree");

                    b.Navigation("ServiceType");

                    b.Navigation("StatusOrder");

                    b.Navigation("StatusPay");

                    b.Navigation("Stock");

                    b.Navigation("ThingType");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.OrderAdditionalInfo", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.Employee", "Employee")
                        .WithMany("OrderAdditionalInfos")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DryCleaningWebSite.Models.Order", "Order")
                        .WithMany("OrderAdditionalInfos")
                        .HasForeignKey("OrderId");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DryCleaningWebSite.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DryCleaningWebSite.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.BurnoutDegree", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Discount", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Employee", b =>
                {
                    b.Navigation("OrderAdditionalInfos");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Filial", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.GlueParts", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.ManufacturerMarking", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.OperationalWearDegree", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Order", b =>
                {
                    b.Navigation("OrderAdditionalInfos");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.PollutionDegree", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.ServiceType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.StatusPay", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.Stock", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DryCleaningWebSite.Models.ThingType", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
